#ifndef __GA_H__
#define __GA_H__

#include "safeJobVector.h"

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

class Ga
{
public:
	Ga();	
	void RunGa();
	void JobProcessingThreadFunc(int nThreadIndex);
	void CreateTargetMeasurements();
	static double CalculateCost(Candidate* pCandidate);
	bool GetThreadFlag(int nThreadIndex) { return m_threadFlagArray[nThreadIndex]; }
	
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

private:
	void InitGa();
	void CalculateCosts();
	void ProcessJobs(int nStartPopIndex, int nEndPopIndex);
	Job* GetJob() { return m_jobVector.GetJob(); }
	int GetMate();
	void CreateChild(Candidate* pParent1, Candidate* pParent2, Candidate* pChild);
	bool FindSimilarCandidate(int nIndex);
	void CreateMutations();

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
	
public:
	static int nNumberOfMachines;	
	
private:	
	int m_nCurIteration;
	double* m_pTargetMeasurement1;
	double* m_pTargetMeasurement2;
	double* MinCost;
	double* Rank;
	vector<Candidate*> Population;
	CSafeJobVector m_jobVector;
	int m_threadIndexArray[MAX_NUMBER_OF_THREADS];
	bool m_threadFlagArray[MAX_NUMBER_OF_THREADS];
	pthread_t m_threadHandleArray[MAX_NUMBER_OF_THREADS];	
};

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

#endif // __GA_H__

